import React from "react";
import { Button, Divider, Form, Header, Segment } from "semantic-ui-react";
import { Field, reduxForm } from "redux-form";
import RadioInput from "../../../app/common/form/RadioInput";
import TextInput from "../../../app/common/form/TextInput";
import TextArea from "../../../app/common/form/TextArea";
// import PlaceInput from "../../../app/common/form/PlaceInput";
import SelectInput from "../../../app/common/form/SelectInput";
// import axios from 'axios'

const interests = [
  { key: "drinks", text: "–ù–∞–ø–∏—Ç–∫–∏", value: "–ù–∞–ø–∏—Ç–∫–∏" },
  { key: "culture", text: "–ö—É–ª—å—Ç—É—Ä–∞", value: "–ö—É–ª—å—Ç—É—Ä–∞" },
  { key: "film", text: "–§–∏–ª—å–º—ã", value: "–§–∏–ª—å–º—ã" },
  { key: "food", text: "–ï–¥–∞", value: "–ï–¥–∞" },
  { key: "music", text: "–ú—É–∑—ã–∫–∞", value: "–ú—É–∑—ã–∫–∞" },
  { key: "travel", text: "–ü—É—Ç–∏—à–µ—Å—Ç–≤–∏–µ", value: "–ü—É—Ç–∏—à–µ—Å—Ç–≤–∏–µ" }
];

// const resultCity = [
//     {
//       text:  state.firebase.city || "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ üèô",
//       value: this.initialValues.city || "",
//       key: "c"
//     }
//   ]

// const handlerGetCity = e => {
//   axios
//     .get(
//       `https://geocode-maps.yandex.ru/1.x/?format=json&geocode=${
//         e.target.value
//       }`
//     )
//     .then(response => {
//       let data = [];
//       response.data.response.GeoObjectCollection.featureMember.forEach(
//         (item, index) => {
//           data.push({
//             text: item.GeoObject.metaDataProperty.GeocoderMetaData.text,
//             value: item.GeoObject.metaDataProperty.GeocoderMetaData.text,
//             key: index
//           });
//         }
//       );
//       this.setState({
//         resultCity: data
//       });
//     });
// };

const AboutPage = ({ pristine, submitting, handleSubmit, updateProfile }) => {
  return (
    <Segment>
      <Header dividing size="large" content="–û–±–æ –º–Ω–µ" />
      <p>
        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ç–¥–∞—á—É –æ—Ç —ç—Ç–æ–≥–æ
        —Å–∞–π—Ç–∞
      </p>
      <Form onSubmit={handleSubmit(updateProfile)}>
        <Form.Group inline>
          <label>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: </label>
          <Field
            name="status"
            component={RadioInput}
            type="radio"
            value="–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"
            label="  –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"
          />
          <Field
            name="status"
            component={RadioInput}
            type="radio"
            value="–í—Å—Ç—Ä–µ—á–∞—é—Å—å"
            label="  –í—Å—Ç—Ä–µ—á–∞—é—Å—å"
          />
          <Field
            name="status"
            component={RadioInput}
            type="radio"
            value="–ü–æ–¥–∞—Ä–∏–ª –∫–æ–ª—å—Ü–æ"
            label="  –ü–æ–¥–∞—Ä–∏–ª –∫–æ–ª—å—Ü–æ"
          />
        </Form.Group>
        <Divider />
        <label>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–µ–±–µ</label>
        <Field name="about" component={TextArea} placeholder="–û–±–æ –º–Ω–µ" />
        <Field
          name="interests"
          component={SelectInput}
          options={interests}
          value="interests"
          multiple={true}
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã"
        />
        <Field
          width={8}
          name="occupation"
          type="text"
          component={TextInput}
          placeholder="–†–æ–¥ –∑–∞–Ω—è—Ç–∏–π"
        />
        {/* <Field
          name="origin"
          type="text"
          component={PlaceInput}
          placeholder="–†–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥"
          options={resultCity}
          // defaultValue={this.props.initialValues.city}
          noResultsMessage="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòå"
          onSearchChange={handlerGetCity}
          onChange={this.SelectCity}
          width={8}
        /> */}
        <Divider />
        <Button
          disabled={pristine || submitting}
          size="large"
          positive
          content="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        />
      </Form>
    </Segment>
  );
};

export default reduxForm({
  form: "userProfile",
  enableReinitialize: true,
  destroyOnUnmount: false
})(AboutPage);